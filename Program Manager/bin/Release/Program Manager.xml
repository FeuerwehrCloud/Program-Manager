<?xml version="1.0"?>
<doc>
<assembly>
<name>
ProgramManager
</name>
</assembly>
<members>
<member name="P:Program_Manager.TextureRenderer.Image">
	<summary>
 The image to use as the texture.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.TextureRenderer.Wrap_Mode">
	<summary>
 How to handle textures smaller than the painted area.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.TextureRenderer.Offset">
	<summary>
 The offset of the texture from the upper left corner in pixels.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.TextureRenderer.Rotation">
	<summary>
 The rotation of the texture in degrees.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.ColorEditorEx.ColorUIWrapper.#ctor(Program_Manager.ColorEditorEx)">
	<summary>
 Creates a new instance.
 </summary>
	<param name="colorEditor">The editor this instance belongs to.</param>
</member><member name="P:Program_Manager.ColorEditorEx.ColorUIWrapper.Control">
	<summary>
 The control to be shown when a color is edited.
 The concrete type is ColorUI which is privately hidden
 within System.Drawing.Design.
 </summary>
</member><member name="P:Program_Manager.ColorEditorEx.ColorUIWrapper.Value">
	<summary>
 Gets the edited color with applied alpha value.
 </summary>
</member><member name="M:Program_Manager.ColorEditorEx.ColorUIWrapper.Start(System.Windows.Forms.Design.IWindowsFormsEditorService,System.Object)">
	<summary>
 Starts the editing process.
 </summary>
	<param name="service">The editor service.</param>
	<param name="value">The value to be edited.</param>
</member><member name="M:Program_Manager.ColorEditorEx.ColorUIWrapper.End">
	<summary>
 End the editing process.
 </summary>
</member><member name="T:Program_Manager.ColorEditorEx.ColorUIWrapper">
	<summary>
 Wrapper for the private ColorUI class nested within <see cref="T:System.Drawing.Design.ColorEditor"/>.
 It publishes its internals via reflection and adds a <see cref="T:System.Windows.Forms.TrackBar"/> to
 adjust teh alpha value.
 </summary>
</member><member name="M:Program_Manager.ColorEditorEx.#ctor">
	<summary>
 Creates a new instance.
 </summary>
</member><member name="M:Program_Manager.ColorEditorEx.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
	<summary>
 Edits the given value.
 </summary>
	<param name="context">Context infromation.</param>
	<param name="provider">Service provider.</param>
	<param name="value">Value to be edited.</param>
	<returns>An edited value.</returns>
</member><member name="T:Program_Manager.ColorEditorEx">
	<summary>
 Class extending the <see cref="T:System.Drawing.Design.ColorEditor"/> which adds the
 capability to also change the alpha value of the color.
 </summary>
</member><member name="M:Program_Manager.SystemTray.BroadcastTaskbarCreated">
	<summary>
 Call this after you have created a taskbar-like window.

 According to MSDN: "With Internet Explorer 4.0 and later, the Shell notifies applications
 that the taskbar has been created. When the taskbar is created, it registers a message with
 the TaskbarCreated string and then broadcasts this message to all top-level windows.
 When your taskbar application receives this message, it should assume that any taskbar icons
 it added have been removed and add them again."
 </summary>
	<remarks></remarks>
</member><member name="T:Program_Manager.SystemTray.ABEdge">
	<summary>
 Represents the edge on which the form is docked to.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_ACCEPTFILES">
	<summary>
 Specifies that a window created with this style accepts drag-drop files.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_APPWINDOW">
	<summary>
 Forces a top-level window onto the taskbar when the window is visible.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_CLIENTEDGE">
	<summary>
 Specifies that a window has a border with a sunken edge.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_COMPOSITED">
	<summary>
 Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_CONTEXTHELP">
	<summary>
 Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
 WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_CONTROLPARENT">
	<summary>
 The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_DLGMODALFRAME">
	<summary>
 Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_LAYERED">
	<summary>
 Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_LAYOUTRTL">
	<summary>
 Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_LEFT">
	<summary>
 Creates a window that has generic left-aligned properties. This is the default.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
	<summary>
 If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_LTRREADING">
	<summary>
 The window text is displayed using left-to-right reading-order properties. This is the default.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_MDICHILD">
	<summary>
 Creates a multiple-document interface (MDI) child window.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_NOACTIVATE">
	<summary>
 Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
 To activate the window, use the SetActiveWindow or SetForegroundWindow function.
 The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
	<summary>
 Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
	<summary>
 Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
	<summary>
 Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_PALETTEWINDOW">
	<summary>
 Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_RIGHT">
	<summary>
 The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
 Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
	<summary>
 Vertical scroll bar (if present) is to the right of the client area. This is the default.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_RTLREADING">
	<summary>
 If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_STATICEDGE">
	<summary>
 Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_TOOLWINDOW">
	<summary>
 Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_TOPMOST">
	<summary>
 Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_TRANSPARENT">
	<summary>
 Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
 To achieve transparency without these restrictions, use the SetWindowRgn function.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStylesEx.WS_EX_WINDOWEDGE">
	<summary>
 Specifies that a window has a border with a raised edge.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_BORDER">
	<summary>The window has a thin-line border.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_CAPTION">
	<summary>The window has a title bar (includes the WS_BORDER style).</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_CHILD">
	<summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_CLIPCHILDREN">
	<summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_CLIPSIBLINGS">
	<summary>
 Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
 If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_DISABLED">
	<summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_DLGFRAME">
	<summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_GROUP">
	<summary>
 The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
 The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
 You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_HSCROLL">
	<summary>The window has a horizontal scroll bar.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_MAXIMIZE">
	<summary>The window is initially maximized.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_MAXIMIZEBOX">
	<summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_MINIMIZE">
	<summary>The window is initially minimized.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_MINIMIZEBOX">
	<summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_OVERLAPPED">
	<summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_OVERLAPPEDWINDOW">
	<summary>The window is an overlapped window.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_POPUP">
	<summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_POPUPWINDOW">
	<summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_SIZEFRAME">
	<summary>The window has a sizing border.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_SYSMENU">
	<summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_TABSTOP">
	<summary>
 The window is a control that can receive the keyboard focus when the user presses the TAB key.
 Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
 You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
 For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
 </summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_VISIBLE">
	<summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
</member><member name="F:Program_Manager.shell_tray.WindowStyles.WS_VSCROLL">
	<summary>The window has a vertical scroll bar.</summary>
</member><member name="M:Program_Manager.WindowInfo.#ctor(System.IntPtr)">
	<summary>
 Creates a new instance of the WindowInfo class using the supplied window handle.
 </summary>
	<param name="handle"></param>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.Close">
	<summary>
 Closes and destroys the window.
 </summary>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.ClassName">
	<summary>
 Returns the class name of the window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Fullname">
	<summary>
 Returns the full filename and path of the module associated with the window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowIconSize.Small">
	<summary>
 A small icon used for the window caption.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowIconSize.Big">
	<summary>
 A big icon used for Alt-Tab.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowIconSize.Small2">
	<summary>
 Returns either the small icon, if available, or the system generated one.
 </summary>
	<remarks></remarks>
</member><member name="T:Program_Manager.WindowInfo.WindowIconSize">
	<summary>
 Represents an icon size for a window.
 </summary>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Icon(Program_Manager.WindowInfo.WindowIconSize)">
	<summary>
 Gets or sets the icon with the specified size for the window.
 </summary>
	<param name="iconsize"></param>
	<value></value>
	<returns></returns>
	<remarks>If the icon has not been set for the window, then it retrieves the file's icon.</remarks>
</member><member name="P:Program_Manager.WindowInfo.Text">
	<summary>
 Gets or sets the window caption.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Region">
	<summary>
 Gets or sets the clip region of the window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Process">
	<summary>
 Returns the process object that owns this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.ProcessId">
	<summary>
 Returns the ID of the process that owns this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Thread">
	<summary>
 Returns the thread object that owns this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.ThreadId">
	<summary>
 Returns the ID of the thread that owns this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Handle">
	<summary>
 Returns the handle used to represent this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SendMessage(System.Windows.Forms.Message@)">
	<summary>
 Sends a message to the window for processing.
 </summary>
	<param name="m"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SendMessage(System.Int32,System.Int32,System.Int32)">
	<summary>
 Sends a message to the window for processing.
 </summary>
	<param name="msg"></param>
	<param name="wparam"></param>
	<param name="lparam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.PostMessage(System.Windows.Forms.Message@)">
	<summary>
 Instead of sending a message and waiting for it to be processed, posts a message on the window's message queue and immediately returns.
 </summary>
	<param name="m"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.PostMessage(System.Int32,System.Int32,System.Int32)">
	<summary>
 Instead of sending a message and waiting for it to be processed, posts a message on the window's message queue and immediately returns.
 </summary>
	<param name="msg"></param>
	<param name="wparam"></param>
	<param name="lparam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.SendMessageTimeoutFlags.NoTimeoutIfNotHung">
	<summary>
	</summary>
	<remarks>Windows 2000 and later only.</remarks>
</member><member name="F:Program_Manager.WindowInfo.SendMessageTimeoutFlags.ErrorOnExit">
	<summary>
	</summary>
	<remarks>Windows Vista and later only.</remarks>
</member><member name="M:Program_Manager.WindowInfo.SendMessageTimeout(System.Windows.Forms.Message@,Program_Manager.WindowInfo.SendMessageTimeoutFlags,System.Int32)">
	<summary>
 Sends a message and if the application does not process the message in the specified timeout period, returns.
 </summary>
	<param name="m"></param>
	<param name="flags"></param>
	<param name="timeout">The timeout period in milliseconds. Note that if the message is being sent to multiple windows, the maximum timeout period is the number of windows times this.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SendMessageTimeout(System.Int32,System.Int32,System.Int32,Program_Manager.WindowInfo.SendMessageTimeoutFlags,System.Int32)">
	<summary>
 Sends a message and if the application does not process the message in the specified timeout period, returns.
 </summary>
	<param name="flags"></param>
	<param name="timeout">The timeout period in milliseconds. Note that if the message is being sent to multiple windows, the maximum timeout period is the number of windows times this.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Rectangle">
	<summary>
 Returns or resizes the rectangle of the full window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Width">
	<summary>
 Gets or sets the width of this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Height">
	<summary>
 Gets or sets the height of this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Size">
	<summary>
 Gets or sets the size of this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Top">
	<summary>
 Gets or sets the top Y position of this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Left">
	<summary>
 Gets or sets the left X position of this window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Location">
	<summary>
 Gets or sets this window's location.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Visible">
	<summary>
 Returns whether this window is currently visible.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This uses SetWindowState with Hide and Show.</remarks>
</member><member name="P:Program_Manager.WindowInfo.Enabled">
	<summary>
 Gets or sets the enabled state of the window.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.Hide">
	<summary>
 Hides the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ShowNormal">
	<summary>
 Unmaximizes, unminimizes, and activates the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ShowMinimized">
	<summary>
 Shows, minimizes, and activates the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ShowMaximized">
	<summary>
 Shows, maximizes and activates the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.Maximized">
	<summary>
 Maximizes the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.NormalNA">
	<summary>
 Unmaximizes, unminimizes the window but does not activate it.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.Show">
	<summary>
 Brings the window back to the state it had previous to being hidden and activates it.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.Minimize">
	<summary>
 Minimizes and activates the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ShowMinimizeNA">
	<summary>
 Shows, minimizes, but does not activate the window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ShowNA">
	<summary>
 Shows the window without activating it.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.Restore">
	<summary>
 If the window is minimized, restores the window to the proper state, either maximized or normal.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ShowDefault">
	<summary>
 Puts the window in the application's startup default state.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowState.ForceMinimize">
	<summary>
 Forces the window into a minimized state.
 </summary>
	<remarks></remarks>
</member><member name="T:Program_Manager.WindowInfo.WindowState">
	<summary>
 Used by SetWindowState and represents the different window states.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SetWindowState(Program_Manager.WindowInfo.WindowState)">
	<summary>
 Sets the window state of the window using a WindowState enum.
 </summary>
	<param name="style"></param>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.Refresh">
	<summary>
 Refreshes the window.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.Move(System.Drawing.Rectangle,System.Boolean)">
	<summary>
 Moves and resizes the window.
 </summary>
	<param name="r"></param>
	<param name="shouldRefresh"></param>
	<remarks></remarks>
</member><member name="T:Program_Manager.WindowInfo.ChildFromPointOptions">
	<summary>
 Provides options for the ChildFromPoint function.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.ChildFromPoint(System.Drawing.Point,Program_Manager.WindowInfo.ChildFromPointOptions)">
	<summary>
 Returns the topmost child window at the specified point with the given options.
 </summary>
	<param name="p">The position in client coordinates.</param>
	<param name="options"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowRelation.Child">
	<summary>
 The top-most child window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowRelation.FirstSibling">
	<summary>
 The top-most sibling window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowRelation.LastSibling">
	<summary>
 The bottom-most sibling window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowRelation.NextSibling">
	<summary>
 The next sibling window below the current window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowRelation.PreviousSibling">
	<summary>
 The next sibling window above the current window.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.WindowInfo.WindowRelation.Owner">
	<summary>
 The owner of the window.
 </summary>
	<remarks></remarks>
</member><member name="T:Program_Manager.WindowInfo.WindowRelation">
	<summary>
 Flags used by GetRelatedWindow.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetRelatedWindow(Program_Manager.WindowInfo.WindowRelation)">
	<summary>
 Returns the window with the specified relationship to this window.
 </summary>
	<param name="relation"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.NotResponding">
	<summary>
 Returns whether or not the application is responding.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.EndTask(System.Boolean)">
	<summary>
 Invokes the more friendly "end task".
 </summary>
	<param name="force"></param>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetChildWindows">
	<summary>
 Returns all child windows.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetChildWindows(Program_Manager.WindowInfo.WindowChooseDelegate)">
	<summary>
 Returns all child windows who's selection delegate returns true.
 </summary>
	<param name="selector"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.ListChildWindow(System.IntPtr,System.Int32)">
	<summary>
 This function is called for every child window.
 </summary>
	<param name="hwnd"></param>
	<param name="lparam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.FindChild(System.String,System.String)">
	<summary>
 Finds the child window with the specified class name and text.
 </summary>
	<param name="className"></param>
	<param name="text"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.FindChildByClass(System.String)">
	<summary>
 Finds the child window with the specified class name.
 </summary>
	<param name="className"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.FindChildByText(System.String)">
	<summary>
 Finds the child window with the specified text.
 </summary>
	<param name="text"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.FindChildren(System.String,System.String)">
	<summary>
 Finds all children with the specified class name and text.
 </summary>
	<param name="className"></param>
	<param name="text"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.FindChildrenByClass(System.String)">
	<summary>
 Finds all children with the specified class name.
 </summary>
	<param name="className"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.FindChildrenByText(System.String)">
	<summary>
 Finds all children with the specified text.
 </summary>
	<param name="text"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetRoot">
	<summary>
 Returns the root window of this window.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetRootOwner">
	<summary>
 Returns the root owner window of this window.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetParentNotOwner">
	<summary>
 Returns the parent, not the owner.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.GetParent">
	<summary>
 Returns the parent, including the owner.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.IsChild(Program_Manager.WindowInfo)">
	<summary>
 Returns whether or not the specified window is a child of this window.
 </summary>
	<param name="parent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.IsParent(Program_Manager.WindowInfo)">
	<summary>
 Returns whether or not the specified window is a parent of this window.
 </summary>
	<param name="child"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SwitchTo(System.Boolean)">
	<summary>
 Switches to this window using the SwitchToThisWindow API.
 </summary>
	<param name="altTab">Whether of not this window was switched to by alt-tab.</param>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Minimized">
	<summary>
 Returns whether this window is minimized.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Program_Manager.WindowInfo.Maximized">
	<summary>
 Returns whether this window is maximized.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.BringToFront">
	<summary>
 Sets this window as the foreground window.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SendToBack">
	<summary>
 Sets this window as the bottom-most window.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SetAsTopMost">
	<summary>
 Sets this window as a topmost window who can't fall behind not topmost windows.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.SetAsNotTopMost">
	<summary>
 Sets this window as a non-topmost window.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.CaptureBitmap">
	<summary>
 Takes a snapshot of a window and its children and returns it as a bitmap.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.AnimateFade(System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Fades the window in or out.
 </summary>
	<param name="time">The number of milliseconds to run the animation.</param>
	<param name="activate">Whether to activate the window.</param>
	<param name="hide">Whether to fade the window in or out.</param>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.AnimateExpandCollapse(System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Collapses or expands the window in or out.
 </summary>
	<param name="time">The number of milliseconds to run the animation.</param>
	<param name="activate">Whether to activate the window.</param>
	<param name="hide">Whether to fade the window in or out.</param>
	<remarks></remarks>
</member><member name="T:Program_Manager.WindowInfo.SlideRoll">
	<summary>
 Whether to do a slide or roll animation.
 </summary>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.AnimateSlideRoll(Program_Manager.WindowInfo.SlideRoll,Program_Manager.WindowInfo.AnimationDirection,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Fades the window in or out.
 </summary>
	<param name="time">The number of milliseconds to run the animation.</param>
	<param name="activate">Whether to activate the window.</param>
	<param name="hide">Whether to fade the window in or out.</param>
	<param name="direction">The direction in which to slide or roll. This may be more than one for diagonal animations.</param>
	<param name="type">The type of animation to play.</param>
	<remarks></remarks>
</member><member name="M:Program_Manager.WindowInfo.AnimateBase(System.Int32,System.Boolean,System.Boolean,System.Int32)">
	<summary>
 The function called by the other animation functions to animate the window.
 </summary>
	<param name="time"></param>
	<param name="activate"></param>
	<param name="hide"></param>
	<param name="base"></param>
	<remarks></remarks>
</member><member name="T:Program_Manager.WindowInfo">
	<summary>
 A full featured window wrapper class.
 </summary>
	<remarks></remarks>
</member><member name="F:Program_Manager.AppbarForm.components">
	<summary>
 Required designer variable.
 </summary>
</member><member name="M:Program_Manager.AppbarForm.Dispose(System.Boolean)">
	<summary>
 Clean up any resources being used.
 </summary>
</member><member name="T:Program_Manager.AppbarForm.ABEdge">
	<summary>
 Represents the edge on which the form is docked to.
 </summary>
	<remarks></remarks>
</member><member name="P:Program_Manager.AppbarForm.Edge">
	<summary>
 Gets or sets the side of the screen on which the form is docked.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Program_Manager.AppbarForm">
	<summary>
 A form that is docked to a side of the screen.
 </summary>
</member>
</members>
</doc>